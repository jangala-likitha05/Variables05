Training
Web Development (Front-end, Back-end, Database):

Front-end:
1)HTML (Hypertext Markup Language):
Text – Content
Hyper Text – A Text containing multiple links
Markup Language – specific set of tags by using these we can create content structure for the websites.
2)CSS (Cascading Style Sheets):
Used to style the content of the website.
3)JavaScript:
It is used to create dynamic websites.
It is scripting language (it doesn’t require compiler and not a programming language).
It is a loosely typed language.
It is a lightweight and dynamic language used to build user interface.
It is introduced in year 1995 by Brenden Eich.
Applications of js:
Mobile apps, web apps, gaming, server-side apps.

Variables:
They are used to store the data. 
Variables are case – sensitive. 
Start with letters, _(underscore), $(dollar sign).
 Can’t start with numbers. Reserved words (keywords) not allowed.
 Allow letters, _(underscore), $(dollar sign), numbers.
1.	let 
2.	var
3.	const
Reassigning:
•	Reassign variables is possible by var
•	var n = 1;
•	        n = 5;
•	        n = n + n;
•	        console.log(n + n);
Output: 10
•	Reassign variables is possible by let
•	<script>
•	        let n = 1;
•	        n = 5;
•	        console.log(n + n);
•	    </script>
Output: 10
•	Reassign not accepted by the const
•	<script>
•	        const n = 1;
•	        n = 5;
•	        console.log(n + n);
•	    </script>
Output: Uncaught TypeError: Assignment to constant variable.
    at index.html: 12:11

Redeclaring:
	Redeclaring with var is possible
	<script>
	        var n = 1;
	        var n = 5;
	        console.log(n + n);
	    </script>
Output: 10
	Redeclaring with let is no accepted.
	<script>
	        let n = 1;
	        let n = 5;
	        console.log(n + n);
	    </script>
Output: Uncaught Syntax Error: Identifier 'n' has already been declared (at index.html: 12:13)
	Redeclaring with const not accepted.
	<script>
	        const n = 1;
	        const n = 5;
	        console.log(n + n);
	 </script>
Output: Uncaught Syntax Error: Identifier 'n' has already been declared (at index.html: 12:13)
Block Scope:
	Var block scope is not accepted.
	<script>
	        var n = 1;
	        {
	            var n = 5;
	            console.log(n);
	        }
	        console.log(n);
	    </script>
Output: 5
5
	Let block scope is allowed.
	<script>
	        let n = 1;
	        {
	            let n = 5;
	            console.log(n);
	        }
	        console.log(n);
	    </script>
Output: 5
1 
	Const allows the block scope.
	<script>
	        const n = 1;
	        {
	            const n = 5;
	            console.log(n);
	        }
	        console.log(n);
	    </script>
Output: 5
1




<script>
        var n = 1;
        var n = 6;
        {
            var n = 5;
            console.log(n);
        }
        console.log(n);
    </script>
Output: 5
5

<script>
        let n = 1;

        {
            let n = 5;
            console.log(n);
        }
        let n = 6;
        console.log(n);
    </script>
Output: Error

<script>
        const n = 1;

        {
            const n = 5;
            console.log(n);
        }
        const n = 6;
        console.log(n);
    </script>
Output: Error


DATA TYPES:
1.	Primitive data types
2.	Non – Primitive data type

To check the data type – typeOf()

•	Primitive data type: Predefined, we can store single values
•	Numbers: integers, float
•	String: Stream of characters enclosed in quotes
•	Boolean: true or false
•	Null: Empty value or no value
•	Undefined: declared variable with no value

1.	Numbers: 1, -1, 2, 3.4, 5.5
2.	Strings – Stream of characters enclosed in quotes. Single, double, backtick quotes introduced in ES6 version, it provides extra functionality , we can insert values.
3.	String concatenation: 
4.	<script>
5.	        let a = "Sai";
6.	        let b = 'Kumar';
7.	        let age = '=';
8.	        let greeting = `Reactjs Student ${age} ${a} ${b}`;
9.	        document.write(greeting);
10.	    </script>


JavaScript Operators:
1.	Arithmetic Operators: +, -, *, / (quotient), % (remainder), ** (exponential), ++, --
2.	<script>
3.	        let a = 10;
4.	        let b = 5;
5.	        b++;
6.	        a--;
7.	        document.write(a % b,'<br>');
8.	        document.write(a / b,'<br>');
9.	        document.write(a * b, '<br>');
10.	        document.write(a ** b,'<br>');
11.	        document.write(b,'<br>');
12.	        document.write(a,'<br>');
13.	    </script>
Output:
3
1.5
54
531441
6
9
2.	Assignment Operators: =, ===, +=, /=
3.	let a = 10;
4.	a += 30;
5.	document.write(a,'<br>');
Output:
40
3.	Logical Operators: &&(and), ||(or), !(not)
4.	<script>
5.	        let a = 10;
6.	        let b = 5;
7.	        a += 30;
8.	        document.write(a>b && b>11,'<br>');
9.	        document.write(a>b || b>11,'<br>');
10.	        document.write(!true,'<br>');
11.	  </script>
Output:
false
true
false
4.	Relational Operators: <, >, <=, >=, ==, ===, !=, !==, ?(ternary Operator)
5.	<script>
6.	        let a = 10;
7.	        let b = '10';
8.	        document.write(a == b,'<br>');
9.	        document.write(a === b,'<br>');
10.	        document.write(a !== b,'<br>');
11.	        document.write(a != b,'<br>');
12.	        document.write(a>b ? 'a is greater than b' : 'b is greater than a');
13.	
14.	        
15.	    </script>
Output:
true
false
true
false
a is greater than b
Window Methods:
1.	alert() – used to give a alert.
2.	prompt() – used to take input

Conditional Statements: To make the set of instructions execute only when the given condition is True. Used to decide whether the code has to be executed or skip based on the given condition. Executed line by line in a sequence.
Block of code: Set of instructions. It will execute only when the given condition is True 
Condition: An expression that evaluates a result (True or False).
Methods: if, if else, switch, ternary operator.
If condition: only executes when the condition is true. Only one possible condition.
Syntax: 
if(condition){
block of code
}
Code:
<script>
        let a = 4;
        let b = 6;
        if(a<b) {
            document.write('b is greater than a','<br>');
        }
        document.write('Good Morning.')
    </script>
Output:
b is greater than a
Good Morning.

If Else:
<script>
        let a = 4;
        let b = 6;
        if(a<b) {
            document.write('b is greater than a','<br>');
        }else{
        document.write('Good Morning.');
        }
    </script>
Output:
b is greater than a
else if:
<script>
        let a = prompt("Enter your age?");
        let b = prompt("Enter your name?");
        if(a < 18){
            alert(b + " you are too young to marry");
            document.write("Too young");
        }else if(a > 35){
            alert(b + " you are old to marry");
            document.write("Too old");
        }else{
            alert(b + " perfect age to marry");
            document.write("Perfect");
        }
        alert("Welcome to My world");
    </script>
Input: 18
Rose
Output:
Perfect age to marry.




Question:
Write a program that reads the scores A and B of two players and checks if one of the scores is greater than 300 and sum of the scores is less than 500.
<script>
        let a = parseInt(prompt("Enter your score"));
        let b = parseInt(prompt("Enter your score"));
        if((a > 300 || b > 300) && (a+b < 500)){
            document.write("can team up");
        }else{
            document.write("cannot team up");
        }
    </script>



Implemented in VScode
