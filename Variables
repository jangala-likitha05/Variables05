Training
Web Development (Front-end, Back-end, Database):

Front-end:
1)HTML (Hypertext Markup Language):
Text – Content
Hyper Text – A Text containing multiple links
Markup Language – specific set of tags by using these we can create content structure for the websites.
2)CSS (Cascading Style Sheets):
Used to style the content of the website.
3)JavaScript:
It is used to create dynamic websites.
It is scripting language (it doesn’t require compiler and not a programming language).
It is a loosely typed language.
It is a lightweight and dynamic language used to build user interface.
It is introduced in year 1995 by Brenden Eich.
Applications of js:
Mobile apps, web apps, gaming, server-side apps.

Variables:
They are used to store the data. 
Variables are case – sensitive. 
Start with letters, _(underscore), $(dollar sign).
 Can’t start with numbers. Reserved words (keywords) not allowed.
 Allow letters, _(underscore), $(dollar sign), numbers.
1.	let 
2.	var
3.	const
Reassigning:
•	Reassign variables is possible by var
•	var n = 1;
•	        n = 5;
•	        n = n + n;
•	        console.log(n + n);
Output: 10
•	Reassign variables is possible by let
•	<script>
•	        let n = 1;
•	        n = 5;
•	        console.log(n + n);
•	    </script>
Output: 10
•	Reassign not accepted by the const
•	<script>
•	        const n = 1;
•	        n = 5;
•	        console.log(n + n);
•	    </script>
Output: Uncaught TypeError: Assignment to constant variable.
    at index.html: 12:11

Redeclaring:
	Redeclaring with var is possible
	<script>
	        var n = 1;
	        var n = 5;
	        console.log(n + n);
	    </script>
Output: 10
	Redeclaring with let is no accepted.
	<script>
	        let n = 1;
	        let n = 5;
	        console.log(n + n);
	    </script>
Output: Uncaught Syntax Error: Identifier 'n' has already been declared (at index.html: 12:13)
	Redeclaring with const not accepted.
	<script>
	        const n = 1;
	        const n = 5;
	        console.log(n + n);
	 </script>
Output: Uncaught Syntax Error: Identifier 'n' has already been declared (at index.html: 12:13)
Block Scope:
	Var block scope is not accepted.
	<script>
	        var n = 1;
	        {
	            var n = 5;
	            console.log(n);
	        }
	        console.log(n);
	    </script>
Output: 5
5
	Let block scope is allowed.
	<script>
	        let n = 1;
	        {
	            let n = 5;
	            console.log(n);
	        }
	        console.log(n);
	    </script>
Output: 5
1 
	Const allows the block scope.
	<script>
	        const n = 1;
	        {
	            const n = 5;
	            console.log(n);
	        }
	        console.log(n);
	    </script>
Output: 5
1




<script>
        var n = 1;
        var n = 6;
        {
            var n = 5;
            console.log(n);
        }
        console.log(n);
    </script>
Output: 5
5

<script>
        let n = 1;

        {
            let n = 5;
            console.log(n);
        }
        let n = 6;
        console.log(n);
    </script>
Output: Error

<script>
        const n = 1;

        {
            const n = 5;
            console.log(n);
        }
        const n = 6;
        console.log(n);
    </script>
Output: Error


DATA TYPES:
1.	Primitive data types
2.	Non – Primitive data type

To check the data type – typeOf()

•	Primitive data type: Predefined, we can store single values
•	Numbers: integers, float
•	String: Stream of characters enclosed in quotes
•	Boolean: true or false
•	Null: Empty value or no value
•	Undefined: declared variable with no value

1.	Numbers: 1, -1, 2, 3.4, 5.5
2.	Strings – Stream of characters enclosed in quotes. Single, double, backtick quotes introduced in ES6 version, it provides extra functionality , we can insert values.
3.	String concatenation: 
4.	<script>
5.	        let a = "Sai";
6.	        let b = 'Kumar';
7.	        let age = '=';
8.	        let greeting = `Reactjs Student ${age} ${a} ${b}`;
9.	        document.write(greeting);
10.	    </script>


JavaScript Operators:
1.	Arithmetic Operators: +, -, *, / (quotient), % (remainder), ** (exponential), ++, --
2.	<script>
3.	        let a = 10;
4.	        let b = 5;
5.	        b++;
6.	        a--;
7.	        document.write(a % b,'<br>');
8.	        document.write(a / b,'<br>');
9.	        document.write(a * b, '<br>');
10.	        document.write(a ** b,'<br>');
11.	        document.write(b,'<br>');
12.	        document.write(a,'<br>');
13.	    </script>
Output:
3
1.5
54
531441
6
9
2.	Assignment Operators: =, ===, +=, /=
3.	let a = 10;
4.	a += 30;
5.	document.write(a,'<br>');
Output:
40
3.	Logical Operators: &&(and), ||(or), !(not)
4.	<script>
5.	        let a = 10;
6.	        let b = 5;
7.	        a += 30;
8.	        document.write(a>b && b>11,'<br>');
9.	        document.write(a>b || b>11,'<br>');
10.	        document.write(!true,'<br>');
11.	  </script>
Output:
false
true
false
4.	Relational Operators: <, >, <=, >=, ==, ===, !=, !==, ?(ternary Operator)
5.	<script>
6.	        let a = 10;
7.	        let b = '10';
8.	        document.write(a == b,'<br>');
9.	        document.write(a === b,'<br>');
10.	        document.write(a !== b,'<br>');
11.	        document.write(a != b,'<br>');
12.	        document.write(a>b ? 'a is greater than b' : 'b is greater than a');
13.	
14.	        
15.	    </script>
Output:
true
false
true
false
a is greater than b
Window Methods:
1.	alert() – used to give a alert.
2.	prompt() – used to take input

Conditional Statements: To make the set of instructions execute only when the given condition is True. Used to decide whether the code has to be executed or skip based on the given condition. Executed line by line in a sequence.
Block of code: Set of instructions. It will execute only when the given condition is True 
Condition: An expression that evaluates a result (True or False).
Methods: if, if else, switch, ternary operator.
If condition: only executes when the condition is true. Only one possible condition.
Syntax: 
if(condition){
block of code
}
Code:
<script>
        let a = 4;
        let b = 6;
        if(a<b) {
            document.write('b is greater than a','<br>');
        }
        document.write('Good Morning.')
    </script>
Output:
b is greater than a
Good Morning.

If Else:
<script>
        let a = 4;
        let b = 6;
        if(a<b) {
            document.write('b is greater than a','<br>');
        }else{
        document.write('Good Morning.');
        }
    </script>
Output:
b is greater than a
else if:
<script>
        let a = prompt("Enter your age?");
        let b = prompt("Enter your name?");
        if(a < 18){
            alert(b + " you are too young to marry");
            document.write("Too young");
        }else if(a > 35){
            alert(b + " you are old to marry");
            document.write("Too old");
        }else{
            alert(b + " perfect age to marry");
            document.write("Perfect");
        }
        alert("Welcome to My world");
    </script>
Input: 18
Rose
Output:
Perfect age to marry.




Question:
Write a program that reads the scores A and B of two players and checks if one of the scores is greater than 300 and sum of the scores is less than 500.
<script>
        let a = parseInt(prompt("Enter your score"));
        let b = parseInt(prompt("Enter your score"));
        if((a > 300 || b > 300) && (a+b < 500)){
            document.write("can team up");
        }else{
            document.write("cannot team up");
        }
    </script>

•	Write  a program to check whether the number is divisible by 2 and 3 and both (take prompt).
•	let a = parseInt(prompt("Enter Number1:"));
•	if(a % 2 ===0 && a % 3 === 0)){
•	            document.write('Number divisible by both');
•	        }
•	else{
•	      document.write(‘Number not divisible by both’);
•	}

•	Write a program to find the largest number among three numbers.

let a = parseInt(prompt("Enter Number1:"));
let b = parseInt(prompt("Enter Number2:"));
let c = parseInt(prompt("Enter Number3:"));
if(a > b && a > c){
            document.write(a + ' is greater');
        }else if(b > a && b > c){
            document.write(b + ' is greater');
        }else{
            document.write(c + ' is greater');
        }

•	Accept the following from the user and calculate the percentage of classes attended:
a)	Total number of working days
b)	Total number of days for absent
c)	let workingDays = parseInt(prompt('Enter number of working days:'));
d)	        let absentDays = parseInt(prompt('Enter number of days absent:'));
e)	        let present = workingDays - absentDays;
f)	        let percent = Math.round(((present / workingDays) * 100) ,                   2);
g)	        if(percent < 75){
h)	            document.write(percent + ' Not Eligible for writing exam.')
i)	        }else{
j)	            document.write(percent + ' Eligible for writing exam');
k)	        }

•	A company decided to give bonus to employee according to the following criteria:
Time period of service                Bonus
More than 10 years                      10%
>= 6 and <=10                                8%
Less than 6 years                         5%
Ask the user for their salary and years of service and print the bonus amount.
let salary = parseInt(prompt('Enter the salary: '));
        let years = parseInt(prompt('Enter the no of years: '));
        if(years > 10){
            document.write('Bonus with Salary: ' + (salary + (salary * 0.1)));
        }else if(years >= 6 && years <= 10){
            document.write('Bonus with Salary: ' + (salary + (salary * 0.08)));
        }else if(salary < 6){
            document.write('Bonus with Salary: ' + (salary + (salary * 0.05)));
        }else{
            document.write('No Bonus with Salary');
        }

Switch:
Syntax: 
switch(expression){
case value:
          code
           break
default:
          code
}

<script>
        let day = prompt('Enter a day: ');
        switch(day){
            case 'Sunday':
            case 'Saturday':
                console.log('weekends');
                document.write('weekends');
                break;
            case 'Monday':
            case 'Tuesday':
            case 'Wednesday':
            case 'Thrusday':
            case 'Friday':
                console.log('weekday');
                document.write('weekday');
                break;
            default:
                console.log('Invalid input');
                document.write('Invalid input');
        }
    </script>

The electricity company charges different rates based on the number of units used. The charges per unit for different ranges are:
•	For the first 50 units (0-50): 2 per unit
•	For the next 100 units (51 – 100): 3 per unit
•	For the next 100 units (151 – 250): 5 per unit
•	For the next 250 units (251 and above): 8 per unit
After calculating the total charge, an 20% of the total amount is added to the bill.
450
50 * 2 = 100
100 * 3 = 300
100 * 5 = 500
200 * 8 = 1600
Bill = 2500
Total = 2500 + (2500 * 0.2) = 3000
<script>
        let electricityUsed = prompt('Enter a charge: ');
        let total = 0;
        if(electricityUsed<=50 && electricityUsed>=0){
            total = electricityUsed * 2;
        }else if(electricityUsed<=150 && electricityUsed>50){
            total = (50 * 2) + (electricityUsed - 50) * 3;
        }else if(electricityUsed<=250 && electricityUsed>150){
            total = (50 * 2) + (100 * 3) + (electricityUsed - 150) * 5;
            electricityUsed = electricityUsed - 100;
        }else{
            total = (50 * 2) + (100 * 3) + (100 * 5) + (electricityUsed - 250) * 8;
        }
        total = total + (total * 0.2);
        document.write(total);
    </script>

It was Pallavi’s first at the institute. Sir asked the students to meet every other student in the class and introduce themselves. Sir asked them to do handshakes when they meet each other.
<script>
        let n = parseInt(prompt('Enter no of students: '));
        let count = 0;
        for(let i = 1;i<n;i++){
            let hanshakes = n - i;
            count += hanshakes;
        }
        document.write(count);
    </script>

Loops:
1.	For loop
for (initialization; condition; update expression) {
---block of code
}
Ex: <script>
        let n = parseInt(prompt('Enter no: '));
        for(let i = 1;i<=n;i++){
            document.write(i,'<br>');
        }
    </script>

#10-15
#i=1; 2; 3; 4; 5; 6
#C=1<=5; 2<=5; 3<=5; 4<=5; 5<=5; 6<=5 #f
#u=i++ =i=i+; 1+1=2; 3; 4; 5; 5+1=6
#b=1; 2; 3; 4; 5
1-5

for(let i = 2;i<=9;i=i+2){
            document.write(i + 3,'<br>');
        }
        //i = 2
        //2 + 3 = 5
        //i= i + 2 => 2 + 2 = 4
        //4 + 3 = 7
        //i = i + 2 => 4 + 2 = 6
        //6 + 3 = 9
        //i = i + 2 => 6 + 2 = 8
        //8 + 3 = 11


3.	For of
4.	<script>
5.	        let t = ['H','J','G','t'];
6.	        for(let i of t){
7.	            document.write(i,'<br>');
8.	        }
9.	    </script>
10.	For in loop
<script>
        let t = 'Hello ';
        for(let i in t){
            document.write(t[i],'<br>');
        }
    </script>

11.	While
Syntax: while(condition) {
//block of code
}
<script>
        let t = 1;
        while(t<6){
            document.write(t,'<br>');
            t++;
        }
</script>

12.	Do while
Syntax: do {
//block of code
} while(condition)
let t = 0;
        do{
            document.write(t + 1,'<br>');
            t = t + 2;
        }while(i < 5)


for(let i=2;i<=8;i = i + 2){
            if(i > 4){
                break;
            }
            document.write(i + 1,'<br>');
        }
<script>
        for(let i=2;i<=8;i = i + 1){
            if(i > 5){
                continue;
            }
            document.write(i + 2,'<br>');
        }
        //i=2, 2 > 5, false, 2 + 2 = 4, i = i + 1 = 3
        //i=3, 3 > 5, false, 3 + 2 = 5, i = i + 1 = 4
        //i=4, 4 > 5, false, 4 + 2 = 6, i = i + 1 = 5
        //i=5, 5 > 5, false, 5 + 2 = 7, i = i + 1 = 6
        //i=6, 6 > 5, true, skip to next iteration
    </script>

Nested Loops:
A loop inside another loop.
The inner loop will execute one time for each iteration of outer loop.
An inner loop within the repeating block of outer loop.
<script>
        for(let i=1;i<=3;i++){
            document.write(i,'<br>');
            for(let j = 1;j<=4;j++){
                document.write(j," ");
            }
            document.write('<br>')
        }
    </script>

Output: 
1
1 2 3 4
2
1 2 3 4
3
1 2 3 4

<script>
        for(let i=1;i<=5;i++){
            for(let j = 1;j<=i;j++){
                document.write('*');
            }
            document.write('<br>');
        }
    </script>
 
Output:
*
**
***
****
*****
<script>
        for (let i = 1; i <= 4; i++) {
      for (let j = 1; j <= 4 - i; j++) {
        document.write("&nbsp;");
      }
      for (let k = 1; k <= i; k++) {
        document.write("*");
      }
      document.write("<br>");
    }
    document.write("<br>");
    </script>


Output:
   *
  **
 ***
****

Functions:
A function is reusable block of code.
It can be called anywhere in the program.
Parameters: Values which are declared inside the program while defining a function.
Arguments: values which are passed through the parameters at the time of calling the function.
<script>
        function greet(a,b){
          document.write(a + b);
        }
        let a = parseInt(prompt("Enter a:"));
        let b = parseInt(prompt("Enter b:"));
        greet(a,b);
    </script>

<script>
        prime = function(a){
          if(a < 1){
            return 'Invalid';
          }else {
            for (let i = 2; i < a; i++) {
              if (a % i == 0) {
                return("Not a prime number",'<br>');
              }else{
                return("Prime number",'<br>');
              }
          }
        }
      }
      let res = prime(9);
      document.write(res);
    </script>

Arrow functions:
Es6 version, more readable and more structure, anonymous functions (lambda functions), without function name but they are assigned to a variable.
Ex: Arrow functions without parameter
let C = () => {
//block of code
}
C();
Arrow functions with parameter
let C = (x,y) => {
console.log(x + y);
}
C(20,30);
<script>
        let sum = (x,y) =>{
          document.write(x + y,'<br>');
        }
        sum(5,7);
        sum(20,30);
    </script>

With one argument:
<script>
        let sum = x => document.write(x ,'<br>');
        sum(5);
        sum(20);
    </script>

Without one argument:
<script>
        let sum = () => document.write(‘hello’,'<br>');
        sum();
        sum();
    </script>

Synchronous function:
Executes line by line
<script>
        function t1(){
          document.write('Task 1' , '<br>');
        }

        function t2(){
          document.write('Task 2' , '<br>');
        }

        function t3(){
          document.write('Task 3' , '<br>');
        }

        t1();
        t2();
        t3();
    </script>


Asynchronous functions:
<script>
        document.write('Hello','<br>');
        setTimeout(() =>{
          document.write('World');
        },1000);
        document.write('javascript',"<br>");
    </script>

CallBack function:
A call function is function that is passed argument to another function.
Ex:
<script>
        function greet(name,callback){
          document.write(`Hello, ${name}`,'<br>');
          callback();
        }

        function sayGoodBye(){
          document.write('Good Bye','<br>');
        }
        greet('Samantha',sayGoodBye);
    </script>

mainFunction takes a callback as parameter callback function is passed to mainFunction.

Using anonymous function:
const greet = function( str,callback ) {
            console.log("Welcome to ", str);
            callback();
        };
        const sayGoodBye = function(){  
          console.log("Good Bye");
          };
          greet('Samantha',sayGoodBye);




Asynchronous callback with setTimeout:
Code: 
function fetchData (callback) {
        document.write ('Fetching data…',"<br>");
        setTimeout(function(){
          callback ();
                document.write  ('Data Fetched','<br>');
        },2000);
      }

      function processData(){
        document.write  ('Processing the fetch data',"<br>");
        }
        fetchData(processData);
Promise:
Promise is a special javascript object that represents an eventual completion (or failure) of an asynchronous operation.
1)	Three states
•	Pending: the initial state, the promise is still waiting for the operation to finish
•	Fulfilled: the operation completed successfully
•	Rejected: the operation failed.
Ex:
To create a promise new Promise ();
The promise constructor takes a function with two parameters:
Resolve – to mark as the promise is successful
Reject – to mark it as failed
Handling:
.then() method is called when the promise is fulfilled.
It receives the result from the resolve();
.catch() method is called when the promise is rejected();
It receives the result from reject();


<script>
        let mypromise = new Promise((resolve,reject) =>{
          let success = true;
          if(success){
            resolve('The operation was successfully.');
          }else{
            reject('the operation failed.');
          }
        });

        mypromise.then(result => {
          console.log(result);
        }).catch(err =>{
          console.log(err);
        })
    </script>

Chaining Promises:
<script>
        let mypromise = new Promise((resolve, reject)=>{
            resolve(5);
        });

        mypromise
        .then(result =>{
          console.log(result);
          return result * 2;
        })
        .then(result =>{
          console.log(result);
          return result + 3;
        })
        .then(result => {
          console.log(result);
        }).catch(err =>{
          console.log(err);
        })
    </script>

Promise with setTimeout:
Using setTimeout the promise will resolve after certain amount of time3.
<script>
        let mypromise = new Promise((resolve, reject)=>{
          setTimeout(() => {
            resolve(5);
        }, 2000);
        });

        mypromise
        .then(result => {
          console.log(result);
        }).catch(err =>{
          console.log(err);
        })
    </script>
Document Object Module (DOM):
It is a programming interface in web development that allows us to interact and manipulate (change) the html documents.
When the web page is loaded, the browser creates the DOM of the webpage.
When an html file is loaded into the browser, the JavaScript cannot understand the html document directly.
DOM is basically the representation of same html document but in a treelike structure composed of objects.
HTML dom it allows JavaScript to access and modify all the elements in HTML document.
Key points:
1.Structure: the DOM represents the structure of html document as tree; each node in a tree represents the element, an attribute, text
2.Manipulation: using js, you can interact with elements like buttons, headings, paragraphs.
3. Event Handling: 
4. W3C – world wide web consortium
In DOM all elements are defined as objects
	Property: is a value that you can set to the objects.(like changing the content of html element)
	Method: an action (like add or delete)
	Getting element by id
	let js = document.getElementById('a');
	        console.log(js);


	Getting element by class
	let q = document.getElementsByClassName('a');
	        console.log(q);

	Getting element by tagname
	let k = document.getElementsByTagName('h1');
	        document.write(k);
	Getting element by query selector
	Used to select HTML element with classname, tagname 

Manipulate Elements:
To create a HTML element
•	createElement()
•	the method used to create a html element
•	let k = document.createElement('h1');
•	        k.className = 'b';
•	        k.textContent = 'Hello';
•	        console.log(k)
•	        document.body.appendChild(k);

let k = ['dwija','jayadeep','jithya'];
        for(let i = 0;i<k.length;i++){
          let t = document.createElement('h2');
          t.className = 'a';
          t.textContent = k[i];
          document.body.appendChild(t);
        }

let k;
        for(let i = 0;i<3;i++){
          let t = document.createElement('h1');
          t.className = 'a';
          t.textContent = i;
          document.body.appendChild(t);
        }


ReactJS:
node -v
npm -v
npx create-react-app app-name
npm start

JSX:
Javascript XML, it is a syntax extension for javascript, jsx allows us to write HTML code in react js, jsx all the html tags must be closed, jsx compiles the html code to js, babel is a tool in jsx

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
</head>
<body>
  <div id="a"></div>
    <script>
      const b = React.createElement('h1',{id : 'c'},'I am Ravi')
      const e = document.getElementById('a')
      const root = ReactDOM.createRoot(e)
      root.render(b)
    </script>
</body>
</html>

Babel:
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
  <div id="a"></div>
    <script type="text/babel">
      const b = <h1 className="aa">Welcome to the it solutions</h1>
      const e = document.getElementById('a')
      const root = ReactDOM.createRoot(e)
      root.render(b)
    </script>
</body>

<div id="root"></div>
    <script type="text/babel">
      // const n = 5
      // const b = <h1 className="aa">Welcome {n*2} to the it solutions</h1>
      // const e = document.getElementById('a')
      // const root = ReactDOM.createRoot(e)
      // root.render(b)
      const App = () =>{
        const isLoggedTrue = true;
        return(
        <div>
          {isLoggedTrue ? <h1>Welcome back, user</h1>:(<h1>Please Login.</h1>)}
          {isLoggedTrue && <h1>you have a new notice</h1>}
          </div>
        )
      }
      const root = ReactDOM.createRoot(document.getElementById('root'))
      root.render(<App/>)
    </script>

Functions:
Using a function call:
You can use a function call directly with in the jsx expression.
function get(name){
        return `Hello, ${name}! welcome to React`;
      }
      function Greeting(){
        const name = 'Kavya'
        return <h1>{get(name)}</h1>
      }

const root = ReactDOM.createRoot(document.getElementById('a'))
root.render(<Greeting/>)

Public/index.html: The main html file that serves as the entry point for the app
Src/index.js: the javascript entry point for the react app where the DOM is rendered
Src/app.js: the main component that serves as the root of the component tree
Src/components: a folder to store reusable components.

Components: this helps to create reusable block of code
If any goes wrong in the user interface it can be found easily
import React, { Component } from "react";
import './App.css';

const Welcome = () => <h1 className="message">Hello Jayadeeep</h1>

function  App() {
  return(
    <div className="App">
      <Welcome/>
    </div>
  )
}

export default App;

import React from "react";

const Welcome = (props) =>{
    const {name,greeting} = props
    return(
        <div>
            <h1 className="message">{greeting}, {name}</h1>
        </div>
    )
}

export default Welcome;

Conditional Rendering:
import React from "react";

    const FruitList = () =>{
        const fruits = ['apple','cherry','orange','grapes']
        return(
            <div>
                <h1>Fruits</h1>
                <ul>
                    {fruits.map((fruit,index)=>{
                        <li key={index}>{fruit}</li>
                    })}
                </ul>
            </div>
        )
    }

export default FruitList;
light Bulb On:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
      .light-bulb{
        height: 350px;
        width: 200px;
      }
      #body{
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-self: center;
        padding: 50px;
      }
      .button{
        padding: 10px;
        background-color: brown;
        border-radius: 5px;
        /* height: 50px;
        width: 100px; */
        color: #fff;
        font-family: "Roboto";
        font-size: 20px;
        border: 2px solid #fff;
      }
    </style>
</head>
<body id="body">
  <img id="bulbImg" class="light-bulb" src="https://d1tgh8fmlzexmh.cloudfront.net/ccbp-dynamic-webapps/bulb-go-off-img.png">
  <button id="toggleButton" class="button" onclick="lightBulbOn()">Turn on</button>
  <script>
    let isOn = false;
    function lightBulbOn() {
      const body = document.getElementById('body');
      const bulbImg = document.getElementById('bulbImg');
      const toggleButton = document.getElementById('toggleButton');
      if(isOn =! isOn){
        body.style.backgroundColor = "red";
        bulbImg.src = "https://d1tgh8fmlzexmh.cloudfront.net/ccbp-dynamic-webapps/bulb-go-on-img.png";
        toggleButton.textContent = "Turn off";
      }else{
        body.style.backgroundColor = "lightyellow";
        bulbImg.src = "https://d1tgh8fmlzexmh.cloudfront.net/ccbp-dynamic-webapps/bulb-go-off-img.png";
        toggleButton.textContent = "Turn on";
      }
    }
  </script>
</body>
</html>

State in React:
In react, state is like a container that holds the data or information for a component. Is an essential part in react because it allows components to be dynamic, interactive and capable of responding to user input or change over time.
Functional components:
Syntax:
Const[statevariable,setStateFunction] = useState(initialvalue)
UseState:
Allows you to add to functional components.
Syntax: const[State,setState] = useState


import React, { useState } from "react";
import './App.css';
// import FruitList from './React/Greetings'

const Counter = () =>{
  const [count, setCount] = useState(0);
  return(
    <div className="App">
      <h1 className="heading-count">{count}</h1>
      <button className="count-btn" onClick={()=>setCount(count+1)}>Increment</button>
      <button className="count-btn" onClick={()=>setCount(count-1)}>Decrement</button>
    </div>
  )
}

export default Counter;

import React, { useState } from "react";
import './App.css';
// import FruitList from './React/Greetings'

const Counter = () =>{
  const [count, setCount] = useState(0);
  return(
    <div className="App">
      <h1 className="heading-count">{count}</h1>
      <button className="count-btn" onClick={()=>setCount(count+1)}>Increment</button>
      <button className="count-btn" onClick={()=>setCount(count-1)}>Decrement</button>
    </div>
  )
}

export default Counter;




Implemented in VScode
